---
swagger: '2.0'
info:
  version: '2017-11-28T00:24:50Z'
  title: 'Reuse Service Api'
basePath: '/production'
schemes:
  - 'https'
x-amazon-apigateway-request-validators:
  validate-body-only:
    validateRequestParameters: false
    validateRequestBody: true
paths:
  /role-test:
    get:
      description: Get role
      consumes:
        - 'application/json'
      tags:
        - RoleTest
      responses:
        200:
          description: '200 response'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        400:
          description: '400 response: Bad Request'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        500:
          description: '500 response: Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '4\d{2}':
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '5\d{2}':
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiRoleTest.Arn}/invocations
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
      # security:
      #   - api_key: []
    options:
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - RoleTest
      responses:
        200:
          description: '200 response'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Headers:
              type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amzn-ErrorType'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
  /system-user:
    get:
      description: Get systemUser
      consumes:
        - 'application/json'
      tags:
        - SystemUser
      responses:
        200:
          description: '200 response'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        400:
          description: '400 response: Bad Request'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        500:
          description: '500 response: Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '4\d{2}':
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '5\d{2}':
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiSystemUser.Arn}/invocations
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
    post:
      description: Adds a new systemUser.
      consumes:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'SystemUserPostModel'
          required: true
          schema:
            $ref: '#/definitions/SystemUserPostModel'
      tags:
        - SystemUser
      responses:
        201:
          description: '201 response'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        400:
          description: '400 response: Bad Request'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        500:
          description: '500 response: Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
      x-amazon-apigateway-request-validator: 'validate-body-only'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '4\d{2}':
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '5\d{2}':
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiSystemUser.Arn}/invocations
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
    options:
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - SystemUser
      responses:
        200:
          description: '200 response'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Headers:
              type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amzn-ErrorType'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
  /system-user/{id}:
    get:
      description: Get a systemUser by id.
      consumes:
        - 'application/json'
      tags:
        - SystemUser
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          type: integer
          description: The systemUser Id
      responses:
        200:
          description: '200 success response'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        400:
          description: '400 response: Bad Request'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        404:
          description: '404 response: No Data Found'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        500:
          description: '500 response: Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '4\d{2}':
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '5\d{2}':
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiSystemUser.Arn}/invocations
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
    patch:
      description: Changes an existing systemUser information by id
      consumes:
        - 'application/json'
      tags:
        - SystemUser
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          type: integer
          description: The SystemUserId
        - in: 'body'
          name: 'SystemUserPatchModel'
          required: true
          schema:
            $ref: '#/definitions/SystemUserPatchModel'
      responses:
        204:
          description: 'Empty Model'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        400:
          description: '400 response: Bad Request'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        500:
          description: '500 response: Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
      x-amazon-apigateway-request-validator: 'validate-body-only'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '4\d{2}':
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '5\d{2}':
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiSystemUser.Arn}/invocations
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
    delete:
      description: Delete an existing systemUser by id
      consumes:
        - 'application/json'
      tags:
        - SystemUser
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          type: integer
          description: The SystemUserId
      responses:
        202:
          description: 'Empty Model'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        400:
          description: '400 response: Bad Request'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
        500:
          description: '500 response: Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
      x-amazon-apigateway-request-validator: 'validate-body-only'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '4\d{2}':
            statusCode: '400'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '5\d{2}':
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiSystemUser.Arn}/invocations
        passthroughBehavior: 'when_no_match'
        httpMethod: 'POST'
        type: 'aws_proxy'
    options:
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      tags:
        - SystemUser
      parameters:
        - in: path
          name: id # Note the name is the same as in the path
          required: true
          type: integer
          description: The systemUser Id
      responses:
        200:
          description: '200 response'
          schema:
            $ref: '#/definitions/EmptyModel'
          headers:
            Access-Control-Allow-Origin:
              type: 'string'
            Access-Control-Allow-Methods:
              type: 'string'
            Access-Control-Allow-Headers:
              type: 'string'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amzn-ErrorType'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
# securityDefinitions:
#   api_key:
#     type: "apiKey"
#     name: "Authorization"
#     in: "header"
#     x-amazon-apigateway-authtype: "cognito_user_pools"
#     x-amazon-apigateway-authorizer:
#       providerARNs:
#         # Dev Server
#         # - "arn:aws:cognito-idp:us-east-1:366251906529:userpool/us-east-1_I9I2v28R7"
#         # - "arn:aws:cognito-idp:us-east-1:366251906529:userpool/us-east-1_elvGqH8Yv"
#       type: "cognito_user_pools"

#Model definition
definitions:
  EmptyModel:
    type: 'object'
    title: 'Empty Schema'
  ErrorModel:
    type: 'object'
    title: 'Error Schema'
    properties:
      errorMessage:
        type: 'string'
      errorCode:
        type: 'number'
  PhoneDataModel:
    type: 'object'
    properties:
      countryCode:
        type: 'string'
        minLength: 1
        maxLength: 10
      areaCode:
        type: 'string'
        minLength: 1
        maxLength: 10
      mobileNumber:
        type: 'string'
        minLength: 1
        maxLength: 10
  AddressDataModel:
    type: 'object'
    properties:
      streetNumber:
        type: 'string'
        minLength: 1
        maxLength: 32
      streetName:
        type: 'string'
        minLength: 1
        maxLength: 128
      apartment:
        type: 'string'
        minLength: 1
        maxLength: 64
      zipCode:
        type: 'string'
        minLength: 1
        maxLength: 10
      city:
        type: 'string'
        minLength: 1
        maxLength: 64
      state:
        type: 'string'
        minLength: 1
        maxLength: 64
      country:
        type: 'string'
        minLength: 1
        maxLength: 64
  SystemUserPostModel:
    title: 'SystemUser Post Data Model'
    description: 'The post data model for systemUser API'
    type: 'object'
    properties:
      data:
        type: 'object'
        required:
          - cognitoUserPoolId
          - username
        properties:
          cognitoUserPoolId:
            type: 'string'
            minLength: 1
            maxLength: 128
            description: 'Device unique identifier'
          username:
            type: 'string'
            minLength: 1
            maxLength: 64
          email:
            type: 'string'
            minLength: 1
            maxLength: 32
          firstName:
            type: 'string'
            minLength: 1
            maxLength: 32
          lastName:
            type: 'string'
            minLength: 1
            maxLength: 32
          birthDate:
            type: 'string'
            format: date
            minLength: 1
            maxLength: 32
          avatar:
            type: 'string'
            minLength: 1
            maxLength: 256
          status:
            type: 'string'
            minLength: 1
            maxLength: 32
            enum:
              - active
              - inactive
              - blocked
          phone:
            $ref: '#/definitions/PhoneDataModel'
          address:
            $ref: '#/definitions/AddressDataModel'
          systemUserRoles:
            type: 'array'
            items:
              type: 'integer'
              description: Array of role ids
  SystemUserPatchModel:
    title: 'SystemUser Patch Data Model'
    description: 'The patch data model for systemUser API'
    properties:
      data:
        type: 'object'
        properties:
          username:
            type: 'string'
            minLength: 1
            maxLength: 64
          email:
            type: 'string'
            minLength: 1
            maxLength: 32
          firstName:
            type: 'string'
            minLength: 1
            maxLength: 32
          lastName:
            type: 'string'
            minLength: 1
            maxLength: 32
          birthDate:
            type: 'string'
            format: date
            minLength: 1
            maxLength: 32
          avatar:
            type: 'string'
            minLength: 1
            maxLength: 256
          status:
            type: 'string'
            minLength: 1
            maxLength: 32
            enum:
              - active
              - inactive
              - blocked
          phone:
            $ref: '#/definitions/PhoneDataModel'
          address:
            $ref: '#/definitions/AddressDataModel'
          systemUserRoles:
            type: 'array'
            items:
              type: 'integer'
              description: Array of role ids
